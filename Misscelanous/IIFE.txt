An Immediately Invoked Function Expression (IIFE) in JavaScript is a function that is executed right after it is defined. The syntax for an IIFE looks like this:

(function() {
    // code to execute immediately
})();

Or with arrow functions:

(() => {
    // code to execute immediately
})();

Here's a breakdown of what happens behind the scenes:

1. Function Declaration vs. Function Expression

JavaScript functions are usually defined as declarations (using function keyword followed by a name) or expressions (functions assigned to variables, constants, or immediately invoked). A function expression, unlike a declaration, does not require a name and can be immediately executed.

For example, (function() { /* code */ }) is a function expression, while function myFunction() { /* code */ } is a function declaration. An IIFE is created using a function expression to avoid naming it since it's meant to run once and doesn't need reuse.

2. Scope Creation and Execution

When the IIFE is invoked, JavaScript creates a new execution context specifically for this function. This context includes:

Local variables within the IIFE

Closure over variables from the outer (enclosing) scope if needed

Global scope isolation, meaning that any variables defined inside the IIFE won’t affect or leak into the global scope.


So, code inside the IIFE runs in a private scope, helping avoid naming collisions with variables in the global scope. This is crucial in JavaScript, where all variables declared outside functions are accessible globally.

3. Immediately Invoked Execution

With the syntax (function() { /* code */ })(), the parentheses wrapping the function tell JavaScript to treat it as an expression. Then, () at the end invokes this function immediately. The entire process goes like this:

1. JavaScript parses (function() { /* code */ }), recognizing it as a function expression.


2. When () is added immediately after, JavaScript executes the function expression immediately.



This combination of creating and executing is what makes IIFE unique.

Example with Explanation

let counter = 0;

(function() {
    let localCounter = 5;
    counter += localCounter;
})();

console.log(counter); // Output: 5
console.log(localCounter); // Error: localCounter is not defined

Explanation:

Inside the IIFE, localCounter is declared and used, but it’s not accessible outside because it's confined to the IIFE’s scope.

The variable counter, defined outside, can still be accessed and modified within the IIFE, thanks to closure.


Key Benefits of IIFE

Data Encapsulation: Variables inside the IIFE are hidden from the global scope, reducing conflicts.

Immediate Execution: Useful for running code once, like initializing values or setting up configurations, without the risk of polluting the global namespace.

Avoiding Hoisting Issues: As an IIFE is not hoisted, it provides predictable behavior by executing immediately upon definition.


IIFEs were popularized as a way to create modular code in JavaScript before the introduction of ES6 modules and let/const for block scoping.

To visualize the step-by-step execution of an IIFE in the JavaScript execution context, let’s walk through the process. I'll use the following example code:

let counter = 0;

(function() {
    let localCounter = 5;
    counter += localCounter;
})();

console.log(counter); // Output: 5

Step-by-Step Breakdown in Execution Context

1. Global Execution Context Creation:

When JavaScript starts executing the code, it first creates the global execution context.

The global execution context has:

A memory heap for variables (e.g., counter).

A call stack to track execution flow.


counter is declared in the global context and initially assigned a value of 0.


Global Execution Context:
- Variables: { counter: 0 }


2. Global Code Execution Begins:

The interpreter starts running the code line by line in the global context.



3. Encountering the IIFE:

The interpreter reaches the IIFE expression (function() { let localCounter = 5; counter += localCounter; })();.

Recognizing it as an expression due to the wrapping parentheses, JavaScript creates a new execution context for this IIFE function.


Call Stack:
- Global Execution Context
- IIFE Execution Context (newly added)


4. Creating the IIFE Execution Context:

JavaScript sets up the IIFE execution context with its own memory and local scope.

Inside this IIFE, a new variable localCounter is created and initialized with 5.

Since the IIFE has access to the outer scope (closure), it can also see counter from the global scope.


IIFE Execution Context:
- Variables: { localCounter: 5 }
- Accessible variables from the outer (global) scope: { counter: 0 }


5. Executing Code Inside the IIFE:

The code inside the IIFE begins executing.

counter += localCounter; is executed:

localCounter is 5.

The global variable counter is updated to 0 + 5 = 5.



After execution in IIFE:
- Global Variables: { counter: 5 }
- IIFE Variables: { localCounter: 5 }


6. Completing the IIFE Execution:

The code inside the IIFE completes execution, so the IIFE’s execution context is removed from the call stack.

localCounter is also removed, as it was scoped only to the IIFE and doesn't exist in the global context.


Call Stack:
- Global Execution Context


7. Returning to Global Execution Context:

The interpreter continues executing any remaining global code.

console.log(counter); outputs 5, as counter was updated by the IIFE.




Final State

Global Execution Context:

Variables: { counter: 5 }

localCounter no longer exists, as it was scoped to the IIFE and was removed when the IIFE completed.



Summary Visualization

Step-by-Step Call Stack and Variables:

1. Start:
   Global Context - { counter: 0 }

2. IIFE Execution Begins:
   Call Stack:
   - Global Context
   - IIFE Context (newly created)

3. Inside IIFE:
   IIFE Context - { localCounter: 5 }
   Global Context - { counter: 0 }

4. After `counter += localCounter;`:
   Global Context - { counter: 5 }
   IIFE Context - { localCounter: 5 }

5. IIFE Ends:
   IIFE Context is removed from Call Stack.

6. Final Output:
   console.log(counter); // Outputs: 5

This sequence explains how the IIFE temporarily creates its own execution context, executes code while isolated from the global scope, and then exits cleanly without leaving residual variables behind.

